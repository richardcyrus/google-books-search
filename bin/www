#!/usr/bin/env node

/**
 * google-book-search
 *
 * The Coding Boot Camp at UNC Charlotte.
 * (c) 2019 Richard Cyrus <hello@rcyrus.com>
 */

/* eslint-disable */
/* eslint operator-linebreak: ["error", "after", { "overrides": { "?": "before", ":": "before"} }] */
/* eslint-enable */

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('google-books-search:server');
const http = require('http');

/**
 * Get the port from the environment and store it in Express.
 *
 * @type {*|*|boolean}
 */
const port = normalisePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create a HTTP server.
 *
 * @type {Server}
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalise a port into a number, string, or false.
 *
 * @param value
 * @returns {*}
 */
function normalisePort(value) {
  const port = parseInt(value, 10);

  // Named Pipe.
  if (isNaN(port)) {
    return value;
  }

  // Port Number.
  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server `error` event.
 *
 * @param error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCESS':
      console.error(`${bind} requires elevated privileges.`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use.`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server `listening` event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

  debug(`Listening on ${bind}`);
}
